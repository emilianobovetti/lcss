#!/bin/bash

. "$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)/mk-env" --

if [ ! -d "$1" ] || [ -z "$2" ]; then
    echo "$(basename $0) fasta-dir primer-seed"
    exit 1
fi

fasta_dir="$1"
primer_seed="$2"

norm_str="$(normalize-fasta "$fasta_dir")"

function fuzzy_search {
    local esc_seq="\x1b\[[0-9;]*m"

    #
    # Since tre-agrep doesn't seem to have a -o
    # option like grep, we'll use --color option
    # and then keep only the text inside escape
    # sequences using sed.
    #
    # TODO: take distance as argument
    #
    tre-agrep --color -6 -D 9 -I 9 "$1" |
    sed "s/\(.*\)$esc_seq\(.*\)$esc_seq\(.*\)/\2/g" |
    sort |
    uniq
}

function count_matches {
    echo "$norm_str" | grep -Ec "$1"
}

function count_degeneracy {
    local deg=1

    while read group; do
        group_len="$(printf "$group" | wc -m)"
        deg="$((deg * (group_len - 2)))"
    done <<< "$(echo "$1" | grep -o '\[[^]]*\]')"

    if [ "$deg" -lt 0 ]; then
        echo 1
    else
        echo "$deg"
    fi
}

function print_primer {
    primer="$(< /dev/stdin)"

    echo "matches: $(count_matches "$primer")"
    echo "degeneracy: $(count_degeneracy "$primer")"
    echo "$primer"
}

seeds="$(echo "$norm_str" | fuzzy_search "$primer_seed")"
done_primers=

while read s1; do
    seed_list="$s1"

    while read s2; do
        seed_list="$(printf "%s\n%s" "$seed_list" "$s2")"
        current_primer="$(echo "$seed_list" | regex-compiler)"

        if [ "$(echo "$done_primers" | grep -Fc "$current_primer")" -eq 0 ]; then
            done_primers="$(printf "%s\n%s" "$current_primer" "$done_primers")"
            echo "$current_primer" | print_primer
            echo "========="
        fi
    done <<< "$(grep -v "$s1" <<< "$seeds")"
done <<< "$seeds"
